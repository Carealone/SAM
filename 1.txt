index.html


<!DOCTYPE html>
<html lang="th">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>น้ำพริกบ้านสวน - น้ำพริกสดใหม่ ส่งตรงถึงบ้าน</title>
    <meta name="description" content="น้ำพริกสูตรโบราณ รสชาติจัดจ้าน พร้อมส่งตรงถึงบ้านคุณ" />
    <meta name="author" content="น้ำพริกบ้านสวน" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;500;600;700&display=swap" rel="stylesheet">

    <meta property="og:title" content="น้ำพริกบ้านสวน - น้ำพริกสดใหม่ ส่งตรงถึงบ้าน" />
    <meta property="og:description" content="น้ำพริกสูตรโบราณ รสชาติจัดจ้าน พร้อมส่งตรงถึงบ้านคุณ" />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@lovable_dev" />
    <meta name="twitter:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />
  </head>

  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

tailwind.config.ts


import type { Config } from "tailwindcss";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			fontFamily: {
				kanit: ['Kanit', 'sans-serif'],
			},
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
				sidebar: {
					DEFAULT: 'hsl(var(--sidebar-background))',
					foreground: 'hsl(var(--sidebar-foreground))',
					primary: 'hsl(var(--sidebar-primary))',
					'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
					accent: 'hsl(var(--sidebar-accent))',
					'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
					border: 'hsl(var(--sidebar-border))',
					ring: 'hsl(var(--sidebar-ring))'
				},
				thai: {
					red: {
						50: '#fef2f2',
						100: '#fee2e2',
						200: '#fecaca',
						300: '#fca5a5',
						400: '#f87171',
						500: '#ef4444',
						600: '#dc2626',
						700: '#b91c1c',
						800: '#991b1b',
						900: '#7f1d1d',
					}
				}
			},
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			keyframes: {
				'accordion-down': {
					from: {
						height: '0'
					},
					to: {
						height: 'var(--radix-accordion-content-height)'
					}
				},
				'accordion-up': {
					from: {
						height: 'var(--radix-accordion-content-height)'
					},
					to: {
						height: '0'
					}
				},
				'float': {
					'0%, 100%': { transform: 'translateY(0px)' },
					'50%': { transform: 'translateY(-10px)' }
				}
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out',
				'float': 'float 3s ease-in-out infinite'
			}
		}
	},
	plugins: [require("tailwindcss-animate")],
} satisfies Config;


src/index.css


@tailwind base;
@tailwind components;
@tailwind utilities;

/* Thai chili paste theme design system */

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;

    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;

    --primary: 0 84% 60%;
    --primary-foreground: 0 0% 98%;

    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;

    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;

    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 84% 60%;

    --radius: 0.5rem;

    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;

    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;

    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;

    --primary: 0 84% 60%;
    --primary-foreground: 0 0% 98%;

    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;

    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;

    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;

    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 84% 60%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground font-kanit;
  }

  /* Thai typography improvements */
  .thai-text {
    line-height: 1.8;
    letter-spacing: 0.025em;
  }
}

@layer components {
  .gradient-bg {
    background: linear-gradient(135deg, #dc2626 0%, #b91c1c 50%, #991b1b 100%);
  }
  
  .glass-effect {
    backdrop-filter: blur(10px);
    background: rgba(255, 255, 255, 0.9);
  }
}

src/types/index.ts


export interface Product {
  id: string;
  name: string;
  description: string;
  price: number;
  image: string;
  category: string;
}

export interface CartItem extends Product {
  quantity: number;
}

export interface OrderData {
  name: string;
  address: string;
  phone: string;
  paymentMethod: string;
  items: CartItem[];
  total: number;
}


src/hooks/useCart.ts


import { useState, useCallback } from 'react';
import { CartItem, Product } from '@/types';

export const useCart = () => {
  const [cart, setCart] = useState<CartItem[]>([]);

  const addToCart = useCallback((product: Product) => {
    setCart(prevCart => {
      const existingItem = prevCart.find(item => item.id === product.id);
      
      if (existingItem) {
        return prevCart.map(item =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      }
      
      return [...prevCart, { ...product, quantity: 1 }];
    });
  }, []);

  const removeFromCart = useCallback((productId: string) => {
    setCart(prevCart => prevCart.filter(item => item.id !== productId));
  }, []);

  const updateQuantity = useCallback((productId: string, quantity: number) => {
    if (quantity <= 0) {
      removeFromCart(productId);
      return;
    }
    
    setCart(prevCart =>
      prevCart.map(item =>
        item.id === productId ? { ...item, quantity } : item
      )
    );
  }, [removeFromCart]);

  const clearCart = useCallback(() => {
    setCart([]);
  }, []);

  const getCartTotal = useCallback(() => {
    return cart.reduce((total, item) => total + (item.price * item.quantity), 0);
  }, [cart]);

  const getCartCount = useCallback(() => {
    return cart.reduce((count, item) => count + item.quantity, 0);
  }, [cart]);

  return {
    cart,
    addToCart,
    removeFromCart,
    updateQuantity,
    clearCart,
    getCartTotal,
    getCartCount,
  };
};


src/data/products.ts


import { Product } from '@/types';

export const products: Product[] = [
  {
    id: '1',
    name: 'น้ำพริกกะปิ',
    description: 'น้ำพริกกะปิสูตรโบราณ รสชาติเข้มข้น หอมกลิ่นกะปิแท้',
    price: 120,
    image: 'https://images.unsplash.com/photo-1618160702438-9b02ab6515c9?w=400&h=300&fit=crop&crop=faces',
    category: 'น้ำพริกพื้นบ้าน'
  },
  {
    id: '2',
    name: 'น้ำพริกกุ้งเสียบ',
    description: 'น้ำพริกกุ้งเสียบกรอบ รสจัดจ้าน เหมาะกับข้าวสวยร้อนๆ',
    price: 150,
    image: 'https://images.unsplash.com/photo-1465146344425-f00d5f5c8f07?w=400&h=300&fit=crop&crop=faces',
    category: 'น้ำพริกทะเล'
  },
  {
    id: '3',
    name: 'น้ำพริกปลาร้า',
    description: 'น้ำพริกปลาร้ารสจัดจ้าน หอมกลิ่นปลาร้าสดใหม่',
    price: 130,
    image: 'https://images.unsplash.com/photo-1582562124811-c09040d0a901?w=400&h=300&fit=crop&crop=faces',
    category: 'น้ำพริกพื้นบ้าน'
  },
  {
    id: '4',
    name: 'น้ำพริกบวบ',
    description: 'น้ำพริกบวบรสกลมกล่อม หอมกลิ่นสมุนไพรสด',
    price: 110,
    image: 'https://images.unsplash.com/photo-1618160702438-9b02ab6515c9?w=400&h=300&fit=crop&crop=faces',
    category: 'น้ำพริกผัก'
  },
  {
    id: '5',
    name: 'น้ำพริกบวบหมา',
    description: 'น้ำพริกบวบหมารสชาติเข้มข้น หอมกลิ่นสมุนไพรไทยแท้',
    price: 140,
    image: 'https://images.unsplash.com/photo-1465146344425-f00d5f5c8f07?w=400&h=300&fit=crop&crop=faces',
    category: 'น้ำพริกผัก'
  },
  {
    id: '6',
    name: 'น้ำพริกองุ่น',
    description: 'น้ำพริกองุ่นรสหวานนำเค็มตาม พิเศษจากภาคใต้',
    price: 160,
    image: 'https://images.unsplash.com/photo-1582562124811-c09040d0a901?w=400&h=300&fit=crop&crop=faces',
    category: 'น้ำพริกพิเศษ'
  }
];


src/components/Header.tsx


import { useState } from 'react';
import { Menu, X, ShoppingCart } from 'lucide-react';
import { Button } from '@/components/ui/button';

interface HeaderProps {
  cartCount: number;
  onCartClick: () => void;
}

const Header = ({ cartCount, onCartClick }: HeaderProps) => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  const navigation = [
    { name: 'สินค้า', href: '#products' },
    { name: 'วิธีสั่งซื้อ', href: '#how-to-order' },
    { name: 'ช่องทางชำระเงิน', href: '#payment' },
    { name: 'ติดต่อเรา', href: '#contact' },
  ];

  return (
    <header className="sticky top-0 z-50 glass-effect border-b border-border/40">
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-between h-16">
          {/* Logo */}
          <div className="flex items-center space-x-3">
            <div className="w-12 h-12 bg-primary rounded-full flex items-center justify-center">
              <span className="text-primary-foreground font-bold text-xl">น</span>
            </div>
            <h1 className="text-2xl font-bold text-primary thai-text">
              น้ำพริกบ้านสวน
            </h1>
          </div>

          {/* Desktop Navigation */}
          <nav className="hidden md:flex space-x-8">
            {navigation.map((item) => (
              <a
                key={item.name}
                href={item.href}
                className="text-foreground hover:text-primary transition-colors duration-200 font-medium thai-text"
              >
                {item.name}
              </a>
            ))}
          </nav>

          {/* Cart and Mobile Menu */}
          <div className="flex items-center space-x-4">
            <Button
              variant="outline"
              size="sm"
              onClick={onCartClick}
              className="relative"
            >
              <ShoppingCart className="h-4 w-4" />
              {cartCount > 0 && (
                <span className="absolute -top-2 -right-2 h-5 w-5 bg-primary text-primary-foreground rounded-full text-xs flex items-center justify-center">
                  {cartCount}
                </span>
              )}
            </Button>

            <Button
              variant="ghost"
              size="sm"
              className="md:hidden"
              onClick={() => setIsMenuOpen(!isMenuOpen)}
            >
              {isMenuOpen ? <X className="h-5 w-5" /> : <Menu className="h-5 w-5" />}
            </Button>
          </div>
        </div>

        {/* Mobile Navigation */}
        {isMenuOpen && (
          <div className="md:hidden border-t border-border/40 py-4">
            <nav className="flex flex-col space-y-3">
              {navigation.map((item) => (
                <a
                  key={item.name}
                  href={item.href}
                  className="text-foreground hover:text-primary transition-colors duration-200 font-medium thai-text px-2 py-1"
                  onClick={() => setIsMenuOpen(false)}
                >
                  {item.name}
                </a>
              ))}
            </nav>
          </div>
        )}
      </div>
    </header>
  );
};

export default Header;


src/components/Hero.tsx


import { Button } from '@/components/ui/button';

const Hero = () => {
  return (
    <section className="relative min-h-[60vh] flex items-center justify-center overflow-hidden">
      {/* Background Image */}
      <div 
        className="absolute inset-0 bg-cover bg-center bg-no-repeat"
        style={{
          backgroundImage: 'url("https://images.unsplash.com/photo-1618160702438-9b02ab6515c9?w=1200&h=600&fit=crop&crop=faces")',
        }}
      >
        <div className="absolute inset-0 gradient-bg opacity-80" />
      </div>

      {/* Content */}
      <div className="relative z-10 text-center text-white px-4 max-w-4xl mx-auto">
        <h2 className="text-4xl md:text-6xl font-bold mb-6 thai-text animate-float">
          น้ำพริกบ้านสวน
          <br />
          <span className="text-yellow-300">สดใหม่ทุกวัน</span>
        </h2>
        <p className="text-lg md:text-xl mb-8 thai-text opacity-90 max-w-2xl mx-auto">
          น้ำพริกสูตรโบราณ รสชาติจัดจ้าน ผลิตจากวัตถุดิบคุณภาพ
          <br />
          พร้อมส่งตรงถึงบ้านคุณ
        </p>
        <Button 
          size="lg" 
          className="bg-white text-primary hover:bg-white/90 font-semibold px-8 py-3 text-lg thai-text"
          onClick={() => document.getElementById('products')?.scrollIntoView({ behavior: 'smooth' })}
        >
          เลือกซื้อเลย
        </Button>
      </div>

      {/* Decorative Elements */}
      <div className="absolute bottom-0 left-0 w-full">
        <svg
          className="w-full h-24 text-white"
          viewBox="0 0 1200 120"
          preserveAspectRatio="none"
        >
          <path
            d="M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z"
            opacity=".25"
            fill="currentColor"
          />
          <path
            d="M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z"
            opacity=".5"
            fill="currentColor"
          />
          <path
            d="M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z"
            fill="currentColor"
          />
        </svg>
      </div>
    </section>
  );
};

export default Hero;


src/components/ProductCard.tsx


import { Button } from '@/components/ui/button';
import { Card, CardContent, CardFooter } from '@/components/ui/card';
import { Product } from '@/types';
import { ShoppingCart } from 'lucide-react';

interface ProductCardProps {
  product: Product;
  onAddToCart: (product: Product) => void;
}

const ProductCard = ({ product, onAddToCart }: ProductCardProps) => {
  return (
    <Card className="group hover:shadow-lg transition-all duration-300 overflow-hidden">
      <div className="relative overflow-hidden">
        <img
          src={product.image}
          alt={product.name}
          className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
        />
        <div className="absolute inset-0 bg-black/0 group-hover:bg-black/10 transition-colors duration-300" />
      </div>
      
      <CardContent className="p-4">
        <div className="mb-2">
          <span className="text-xs font-medium text-primary bg-primary/10 px-2 py-1 rounded-full">
            {product.category}
          </span>
        </div>
        <h3 className="text-lg font-semibold mb-2 thai-text group-hover:text-primary transition-colors">
          {product.name}
        </h3>
        <p className="text-muted-foreground text-sm thai-text line-clamp-2">
          {product.description}
        </p>
      </CardContent>
      
      <CardFooter className="p-4 pt-0 flex items-center justify-between">
        <span className="text-xl font-bold text-primary">
          ฿{product.price.toLocaleString()}
        </span>
        <Button
          onClick={() => onAddToCart(product)}
          className="group/btn"
          size="sm"
        >
          <ShoppingCart className="h-4 w-4 mr-2 group-hover/btn:animate-bounce" />
          สั่งซื้อ
        </Button>
      </CardFooter>
    </Card>
  );
};

export default ProductCard;

src/components/ProductGrid.tsx


import { products } from '@/data/products';
import { Product } from '@/types';
import ProductCard from './ProductCard';

interface ProductGridProps {
  onAddToCart: (product: Product) => void;
}

const ProductGrid = ({ onAddToCart }: ProductGridProps) => {
  return (
    <section id="products" className="py-16 bg-secondary/30">
      <div className="container mx-auto px-4">
        <div className="text-center mb-12">
          <h2 className="text-3xl md:text-4xl font-bold text-primary mb-4 thai-text">
            สินค้าน้ำพริกแนะนำ
          </h2>
          <p className="text-muted-foreground text-lg thai-text max-w-2xl mx-auto">
            น้ำพริกสูตรโบราณจากบ้านสวน ผลิตสดใหม่ทุกวัน ด้วยวัตถุดิบคุณภาพ
          </p>
        </div>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {products.map((product) => (
            <ProductCard
              key={product.id}
              product={product}
              onAddToCart={onAddToCart}
            />
          ))}
        </div>
      </div>
    </section>
  );
};

export default ProductGrid;

src/components/Cart.tsx


import { CartItem } from '@/types';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Minus, Plus, Trash2, X } from 'lucide-react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';

interface CartProps {
  isOpen: boolean;
  onClose: () => void;
  cart: CartItem[];
  onUpdateQuantity: (productId: string, quantity: number) => void;
  onRemoveItem: (productId: string) => void;
  total: number;
}

const Cart = ({ 
  isOpen, 
  onClose, 
  cart, 
  onUpdateQuantity, 
  onRemoveItem, 
  total 
}: CartProps) => {
  const scrollToOrderForm = () => {
    onClose();
    setTimeout(() => {
      document.getElementById('order-form')?.scrollIntoView({ behavior: 'smooth' });
    }, 100);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="text-xl font-bold thai-text flex items-center justify-between">
            ตะกร้าสินค้า
            <Button variant="ghost" size="sm" onClick={onClose}>
              <X className="h-4 w-4" />
            </Button>
          </DialogTitle>
        </DialogHeader>

        {cart.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-muted-foreground thai-text">ยังไม่มีสินค้าในตะกร้า</p>
          </div>
        ) : (
          <div className="space-y-4">
            {cart.map((item) => (
              <Card key={item.id}>
                <CardContent className="p-4">
                  <div className="flex items-center space-x-4">
                    <img
                      src={item.image}
                      alt={item.name}
                      className="w-16 h-16 object-cover rounded-lg"
                    />
                    
                    <div className="flex-1">
                      <h4 className="font-semibold thai-text">{item.name}</h4>
                      <p className="text-primary font-bold">฿{item.price.toLocaleString()}</p>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => onUpdateQuantity(item.id, item.quantity - 1)}
                      >
                        <Minus className="h-3 w-3" />
                      </Button>
                      
                      <span className="w-8 text-center font-medium">
                        {item.quantity}
                      </span>
                      
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => onUpdateQuantity(item.id, item.quantity + 1)}
                      >
                        <Plus className="h-3 w-3" />
                      </Button>
                    </div>
                    
                    <div className="text-right">
                      <p className="font-bold text-primary">
                        ฿{(item.price * item.quantity).toLocaleString()}
                      </p>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => onRemoveItem(item.id)}
                        className="text-destructive hover:text-destructive"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
            
            <div className="border-t pt-4">
              <div className="flex justify-between items-center text-lg font-bold">
                <span className="thai-text">รวมทั้งหมด:</span>
                <span className="text-primary">฿{total.toLocaleString()}</span>
              </div>
              
              <Button 
                className="w-full mt-4" 
                size="lg"
                onClick={scrollToOrderForm}
              >
                ดำเนินการสั่งซื้อ
              </Button>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
};

export default Cart;

src/components/HowToOrder.tsx


const HowToOrder = () => {
  const steps = [
    {
      number: '1',
      title: 'เลือกสินค้า',
      description: 'เลือกน้ำพริกที่ต้องการจากรายการสินค้า กดปุ่มสั่งซื้อเพื่อเพิ่มลงตะกร้า'
    },
    {
      number: '2',
      title: 'ตรวจสอบตะกร้า',
      description: 'ตรวจสอบรายการสินค้าในตะกร้า ปรับจำนวนตามต้องการ'
    },
    {
      number: '3',
      title: 'กรอกข้อมูล',
      description: 'กรอกข้อมูลการจัดส่ง ชื่อ ที่อยู่ และเบอร์โทรศัพท์'
    },
    {
      number: '4',
      title: 'เลือกการชำระเงิน',
      description: 'เลือกช่องทางชำระเงินที่ต้องการ และยืนยันการสั่งซื้อ'
    },
    {
      number: '5',
      title: 'รับสินค้า',
      description: 'รอรับน้ำพริกสดใหม่ ส่งตรงถึงบ้านคุณภายใน 2-3 วันทำการ'
    }
  ];

  return (
    <section id="how-to-order" className="py-16">
      <div className="container mx-auto px-4 max-w-4xl">
        <div className="text-center mb-12">
          <h2 className="text-3xl md:text-4xl font-bold text-primary mb-4 thai-text">
            วิธีการสั่งซื้อ
          </h2>
          <p className="text-muted-foreground text-lg thai-text">
            ขั้นตอนง่ายๆ ในการสั่งซื้อน้ำพริกบ้านสวน
          </p>
        </div>

        <div className="space-y-8">
          {steps.map((step, index) => (
            <div key={step.number} className="flex items-start space-x-6">
              <div className="flex-shrink-0">
                <div className="w-12 h-12 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-bold text-lg">
                  {step.number}
                </div>
              </div>
              <div className="flex-1">
                <h3 className="text-xl font-semibold mb-2 thai-text">
                  {step.title}
                </h3>
                <p className="text-muted-foreground thai-text">
                  {step.description}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default HowToOrder;

src/components/OrderForm.tsx


import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { CartItem } from '@/types';
import { useToast } from '@/hooks/use-toast';

interface OrderFormProps {
  cart: CartItem[];
  total: number;
  onOrderComplete: () => void;
}

const OrderForm = ({ cart, total, onOrderComplete }: OrderFormProps) => {
  const { toast } = useToast();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    address: '',
    phone: '',
    paymentMethod: ''
  });

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (cart.length === 0) {
      toast({
        title: "ตะกร้าสินค้าว่าง",
        description: "กรุณาเพิ่มสินค้าลงในตะกร้าก่อนทำการสั่งซื้อ",
        variant: "destructive",
      });
      return;
    }

    if (!formData.name || !formData.address || !formData.phone || !formData.paymentMethod) {
      toast({
        title: "ข้อมูลไม่ครบถ้วน",
        description: "กรุณากรอกข้อมูลให้ครบถ้วน",
        variant: "destructive",
      });
      return;
    }

    setIsSubmitting(true);

    // Simulate order processing
    setTimeout(() => {
      toast({
        title: "สั่งซื้อสำเร็จ!",
        description: "ขอบคุณสำหรับการสั่งซื้อ เราจะติดต่อกลับเพื่อยืนยันคำสั่งซื้อเร็วๆ นี้",
      });
      
      setFormData({
        name: '',
        address: '',
        phone: '',
        paymentMethod: ''
      });
      
      onOrderComplete();
      setIsSubmitting(false);
    }, 2000);
  };

  return (
    <section id="order-form" className="py-16 bg-secondary/30">
      <div className="container mx-auto px-4 max-w-2xl">
        <div className="text-center mb-8">
          <h2 className="text-3xl md:text-4xl font-bold text-primary mb-4 thai-text">
            กรอกข้อมูลการสั่งซื้อ
          </h2>
        </div>

        <Card>
          <CardHeader>
            <CardTitle className="thai-text">ข้อมูลการจัดส่ง</CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-6">
              <div>
                <Label htmlFor="name" className="thai-text">ชื่อ-นามสกุล *</Label>
                <Input
                  id="name"
                  value={formData.name}
                  onChange={(e) => handleInputChange('name', e.target.value)}
                  placeholder="กรอกชื่อ-นามสกุลของคุณ"
                  required
                />
              </div>

              <div>
                <Label htmlFor="address" className="thai-text">ที่อยู่จัดส่ง *</Label>
                <Textarea
                  id="address"
                  value={formData.address}
                  onChange={(e) => handleInputChange('address', e.target.value)}
                  placeholder="กรอกที่อยู่สำหรับจัดส่งสินค้า"
                  rows={3}
                  required
                />
              </div>

              <div>
                <Label htmlFor="phone" className="thai-text">เบอร์โทรศัพท์ *</Label>
                <Input
                  id="phone"
                  type="tel"
                  value={formData.phone}
                  onChange={(e) => handleInputChange('phone', e.target.value)}
                  placeholder="กรอกเบอร์โทรศัพท์ เช่น 0812345678"
                  required
                />
              </div>

              <div>
                <Label htmlFor="payment-method" className="thai-text">ช่องทางชำระเงิน *</Label>
                <Select value={formData.paymentMethod} onValueChange={(value) => handleInputChange('paymentMethod', value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="เลือกช่องทางชำระเงิน" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="bank-transfer">โอนเงินผ่านธนาคาร</SelectItem>
                    <SelectItem value="promptpay">พร้อมเพย์</SelectItem>
                    <SelectItem value="credit-card">บัตรเครดิต / เดบิต</SelectItem>
                    <SelectItem value="cash-on-delivery">เก็บเงินปลายทาง</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {cart.length > 0 && (
                <div className="border-t pt-4">
                  <h4 className="font-semibold mb-2 thai-text">สรุปการสั่งซื้อ</h4>
                  <div className="space-y-2 text-sm">
                    {cart.map((item) => (
                      <div key={item.id} className="flex justify-between">
                        <span className="thai-text">{item.name} x {item.quantity}</span>
                        <span>฿{(item.price * item.quantity).toLocaleString()}</span>
                      </div>
                    ))}
                  </div>
                  <div className="border-t mt-2 pt-2 flex justify-between font-bold text-lg">
                    <span className="thai-text">รวมทั้งหมด:</span>
                    <span className="text-primary">฿{total.toLocaleString()}</span>
                  </div>
                </div>
              )}

              <Button 
                type="submit" 
                className="w-full" 
                size="lg"
                disabled={isSubmitting || cart.length === 0}
              >
                {isSubmitting ? 'กำลังดำเนินการ...' : 'ยืนยันการสั่งซื้อ'}
              </Button>
            </form>
          </CardContent>
        </Card>
      </div>
    </section>
  );
};

export default OrderForm;

src/components/PaymentMethods.tsx


import { CreditCard, Smartphone, University, Truck } from 'lucide-react';

const PaymentMethods = () => {
  const methods = [
    {
      icon: University,
      title: 'โอนเงินผ่านธนาคาร',
      details: [
        'ธนาคารกรุงเทพ สาขาบางนา',
        'เลขที่บัญชี: 123-4-56789-0',
        'ชื่อบัญชี: น้ำพริกบ้านสวน'
      ]
    },
    {
      icon: Smartphone,
      title: 'พร้อมเพย์',
      details: [
        'เบอร์โทรศัพท์: 081-234-5678',
        'ชื่อบัญชี: น้ำพริกบ้านสวน'
      ]
    },
    {
      icon: CreditCard,
      title: 'บัตรเครดิต / เดบิต',
      details: [
        'รองรับ Visa, MasterCard, JCB',
        'ชำระผ่านระบบออนไลน์ปลอดภัย'
      ]
    },
    {
      icon: Truck,
      title: 'เก็บเงินปลายทาง',
      details: [
        'ชำระเงินเมื่อรับสินค้า',
        'สะดวกและปลอดภัย'
      ]
    }
  ];

  return (
    <section id="payment" className="py-16">
      <div className="container mx-auto px-4 max-w-4xl">
        <div className="text-center mb-12">
          <h2 className="text-3xl md:text-4xl font-bold text-primary mb-4 thai-text">
            ช่องทางชำระเงิน
          </h2>
          <p className="text-muted-foreground text-lg thai-text">
            เลือกช่องทางชำระเงินที่สะดวกสำหรับคุณ
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {methods.map((method, index) => {
            const IconComponent = method.icon;
            return (
              <div key={index} className="flex items-start space-x-4 p-6 rounded-lg border border-border hover:border-primary/50 transition-colors">
                <div className="flex-shrink-0">
                  <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center">
                    <IconComponent className="h-6 w-6 text-primary" />
                  </div>
                </div>
                <div>
                  <h3 className="text-lg font-semibold mb-2 thai-text">
                    {method.title}
                  </h3>
                  <div className="space-y-1 text-muted-foreground">
                    {method.details.map((detail, idx) => (
                      <p key={idx} className="text-sm thai-text">
                        {detail}
                      </p>
                    ))}
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </section>
  );
};

export default PaymentMethods;

src/components/Contact.tsx


import { Phone, Mail, MapPin, Facebook, Instagram } from 'lucide-react';

const Contact = () => {
  const contactInfo = [
    {
      icon: Phone,
      label: 'โทรศัพท์',
      value: '081-234-5678'
    },
    {
      icon: Mail,
      label: 'อีเมล',
      value: 'contact@namprikbansuan.com'
    },
    {
      icon: MapPin,
      label: 'ที่อยู่',
      value: '123 หมู่ 5 ตำบลบ้านสวน อำเภอเมือง จังหวัดชลบุรี 20000'
    }
  ];

  const socialLinks = [
    {
      icon: Facebook,
      label: 'Facebook',
      url: 'https://www.facebook.com/namprikbansuan'
    },
    {
      icon: Instagram,
      label: 'Instagram',
      url: 'https://www.instagram.com/namprikbansuan'
    }
  ];

  return (
    <section id="contact" className="py-16 bg-secondary/30">
      <div className="container mx-auto px-4 max-w-4xl">
        <div className="text-center mb-12">
          <h2 className="text-3xl md:text-4xl font-bold text-primary mb-4 thai-text">
            ติดต่อเรา
          </h2>
          <p className="text-muted-foreground text-lg thai-text">
            มีคำถาม หรือต้องการสอบถามข้อมูลเพิ่มเติม ติดต่อเราได้ที่
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
          <div className="space-y-6">
            {contactInfo.map((info, index) => {
              const IconComponent = info.icon;
              return (
                <div key={index} className="flex items-start space-x-4">
                  <div className="flex-shrink-0">
                    <div className="w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center">
                      <IconComponent className="h-5 w-5 text-primary" />
                    </div>
                  </div>
                  <div>
                    <h4 className="font-semibold thai-text">{info.label}</h4>
                    <p className="text-muted-foreground thai-text">{info.value}</p>
                  </div>
                </div>
              );
            })}
          </div>

          <div className="space-y-6">
            <h4 className="text-lg font-semibold thai-text">ติดตามเราได้ที่</h4>
            <div className="flex space-x-4">
              {socialLinks.map((social, index) => {
                const IconComponent = social.icon;
                return (
                  <a
                    key={index}
                    href={social.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="w-10 h-10 bg-primary text-primary-foreground rounded-lg flex items-center justify-center hover:bg-primary/90 transition-colors"
                    aria-label={social.label}
                  >
                    <IconComponent className="h-5 w-5" />
                  </a>
                );
              })}
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Contact;

src/components/Footer.tsx


const Footer = () => {
  return (
    <footer className="bg-primary text-primary-foreground py-8">
      <div className="container mx-auto px-4 text-center">
        <div className="mb-4">
          <h3 className="text-xl font-bold thai-text">น้ำพริกบ้านสวน</h3>
          <p className="text-primary-foreground/80 thai-text">
            น้ำพริกสูตรโบราณ รสชาติจัดจ้าน
          </p>
        </div>
        <div className="border-t border-primary-foreground/20 pt-4">
          <p className="text-sm text-primary-foreground/60 thai-text">
            © 2024 น้ำพริกบ้านสวน. สงวนลิขสิทธิ์.
          </p>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

src/pages/Index.tsx


import { useState } from 'react';
import { useCart } from '@/hooks/useCart';
import { Product } from '@/types';

import Header from '@/components/Header';
import Hero from '@/components/Hero';
import ProductGrid from '@/components/ProductGrid';
import Cart from '@/components/Cart';
import HowToOrder from '@/components/HowToOrder';
import OrderForm from '@/components/OrderForm';
import PaymentMethods from '@/components/PaymentMethods';
import Contact from '@/components/Contact';
import Footer from '@/components/Footer';

const Index = () => {
  const [isCartOpen, setIsCartOpen] = useState(false);
  const {
    cart,
    addToCart,
    removeFromCart,
    updateQuantity,
    clearCart,
    getCartTotal,
    getCartCount,
  } = useCart();

  const handleAddToCart = (product: Product) => {
    addToCart(product);
  };

  const handleOrderComplete = () => {
    clearCart();
    setIsCartOpen(false);
  };

  return (
    <div className="min-h-screen bg-background">
      <Header 
        cartCount={getCartCount()} 
        onCartClick={() => setIsCartOpen(true)} 
      />
      
      <main>
        <Hero />
        <ProductGrid onAddToCart={handleAddToCart} />
        <HowToOrder />
        <OrderForm 
          cart={cart} 
          total={getCartTotal()} 
          onOrderComplete={handleOrderComplete}
        />
        <PaymentMethods />
        <Contact />
      </main>

      <Footer />

      <Cart
        isOpen={isCartOpen}
        onClose={() => setIsCartOpen(false)}
        cart={cart}
        onUpdateQuantity={updateQuantity}
        onRemoveItem={removeFromCart}
        total={getCartTotal()}
      />
    </div>
  );
};

export default Index;

src/components/AuthModal.tsx


import { useState } from 'react';
import { X } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { AuthData, User } from '@/types';

interface AuthModalProps {
  isOpen: boolean;
  onClose: () => void;
  onLogin: (data: AuthData) => Promise<User>;
  onRegister: (data: AuthData) => Promise<User>;
  isLoading: boolean;
}

const AuthModal = ({ isOpen, onClose, onLogin, onRegister, isLoading }: AuthModalProps) => {
  // ... keep existing code (state and handlers)
  const [isLoginMode, setIsLoginMode] = useState(true);
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    name: '',
    phone: '',
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (isLoginMode) {
      await onLogin({
        email: formData.email,
        password: formData.password,
      });
    } else {
      await onRegister({
        email: formData.email,
        password: formData.password,
        name: formData.name,
        phone: formData.phone,
      });
    }
    
    setFormData({ email: '', password: '', name: '', phone: '' });
    onClose();
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData(prev => ({
      ...prev,
      [e.target.name]: e.target.value,
    }));
  };

  // ... keep existing code (JSX return)
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="thai-text">
            {isLoginMode ? 'เข้าสู่ระบบ' : 'สมัครสมาชิก'}
          </DialogTitle>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          {!isLoginMode && (
            <div className="space-y-2">
              <Label htmlFor="name" className="thai-text">ชื่อ-นามสกุล</Label>
              <Input
                id="name"
                name="name"
                type="text"
                value={formData.name}
                onChange={handleInputChange}
                placeholder="กรอกชื่อ-นามสกุล"
                required={!isLoginMode}
              />
            </div>
          )}
          
          <div className="space-y-2">
            <Label htmlFor="email" className="thai-text">อีเมล</Label>
            <Input
              id="email"
              name="email"
              type="email"
              value={formData.email}
              onChange={handleInputChange}
              placeholder="กรอกอีเมล"
              required
            />
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="password" className="thai-text">รหัสผ่าน</Label>
            <Input
              id="password"
              name="password"
              type="password"
              value={formData.password}
              onChange={handleInputChange}
              placeholder="กรอกรหัสผ่าน"
              required
              minLength={6}
            />
          </div>
          
          {!isLoginMode && (
            <div className="space-y-2">
              <Label htmlFor="phone" className="thai-text">เบอร์โทรศัพท์</Label>
              <Input
                id="phone"
                name="phone"
                type="tel"
                value={formData.phone}
                onChange={handleInputChange}
                placeholder="กรอกเบอร์โทรศัพท์ (ไม่บังคับ)"
              />
            </div>
          )}
          
          <Button
            type="submit"
            className="w-full thai-text"
            disabled={isLoading}
          >
            {isLoading ? 'กำลังดำเนินการ...' : (isLoginMode ? 'เข้าสู่ระบบ' : 'สมัครสมาชิก')}
          </Button>
        </form>
        
        <div className="text-center">
          <button
            type="button"
            onClick={() => setIsLoginMode(!isLoginMode)}
            className="text-primary hover:underline thai-text"
          >
            {isLoginMode ? 'ยังไม่มีบัญชี? สมัครสมาชิก' : 'มีบัญชีแล้ว? เข้าสู่ระบบ'}
          </button>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default AuthModal;

